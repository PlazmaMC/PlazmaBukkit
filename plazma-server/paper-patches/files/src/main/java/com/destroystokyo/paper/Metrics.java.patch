--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -41,7 +_,7 @@
     public static final int B_STATS_VERSION = 1;
 
     // The url to which the data is sent
-    private static final String URL = "https://bStats.org/submitData/server-implementation";
+    private static final java.net.URL URL; // Plazma
 
     // Should failed requests be logged?
     private static boolean logFailedRequests = false;
@@ -58,6 +_,16 @@
     // A list with all custom charts
     private final List<CustomChart> charts = new ArrayList<>();
 
+    // Plazma start - Create a URL instance only once
+    static {
+        try {
+            URL = java.net.URI.create("https://bStats.org/submitData/server-implementation").toURL();
+        } catch (final IOException e) {
+            throw new IllegalStateException(e);
+        }
+    }
+    // Plazma end - Create a URL instance only once
+
     /**
      * Class constructor.
      *
@@ -109,7 +_,7 @@
     }
 
     /**
-     * Gets the plugin specific data.
+     * Gets the plugin-specific data.
      *
      * @return The plugin specific data.
      */
@@ -132,7 +_,7 @@
     }
 
     /**
-     * Gets the server specific data.
+     * Gets the server-specific data.
      *
      * @return The server specific data.
      */
@@ -180,13 +_,13 @@
      * Sends the data to the bStats server.
      *
      * @param data The data to send.
-     * @throws Exception If the request failed.
+     * @throws IOException If the request failed.
      */
-    private static void sendData(JSONObject data) throws Exception {
+    private static void sendData(final JSONObject data) throws IOException { // Plazma
         if (data == null) {
             throw new IllegalArgumentException("Data cannot be null!");
         }
-        HttpsURLConnection connection = (HttpsURLConnection) new URL(URL).openConnection();
+        HttpsURLConnection connection = (HttpsURLConnection) URL.openConnection(); // Plazma - Use modern method
 
         // Compress the data to save bandwidth
         byte[] compressedData = compress(data.toString());
@@ -211,10 +_,10 @@
     }
 
     /**
-     * Gzips the given String.
+     * Compresses the given String using Gzip.
      *
-     * @param str The string to gzip.
-     * @return The gzipped String.
+     * @param str The string to compress.
+     * @return The compressed String.
      * @throws IOException If the compression failed.
      */
     private static byte[] compress(final String str) throws IOException {
@@ -223,7 +_,7 @@
         }
         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         GZIPOutputStream gzip = new GZIPOutputStream(outputStream);
-        gzip.write(str.getBytes("UTF-8"));
+        gzip.write(str.getBytes(java.nio.charset.StandardCharsets.UTF_8)); // Plazma - Use modern method
         gzip.close();
         return outputStream.toByteArray();
     }
@@ -396,7 +_,7 @@
     }
 
     /**
-     * Represents a custom single line chart.
+     * Represents a custom single-line chart.
      */
     public static class SingleLineChart extends CustomChart {
 
@@ -559,116 +_,182 @@
 
     }
 
-    public static class PaperMetrics {
-        public static void startMetrics() {
+    // Plazma start - PaperMetrics
+    public static final class PaperMetrics {
+        @org.jspecify.annotations.Nullable
+        private static Metrics loadMetrics(final io.papermc.paper.ServerBuildInfo build) {
             // Get the config file
-            File configFile = new File(new File((File) MinecraftServer.getServer().options.valueOf("plugins"), "bStats"), "config.yml");
-            YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile);
+            final File configFile = new File(new File((File) MinecraftServer.getServer().options.valueOf("plugins"), "bStats"), "config.yml");
+            final YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile);
 
             // Check if the config file exists
-            if (!config.isSet("serverUuid")) {
-
-                // Add default values
-                config.addDefault("enabled", true);
-                // Every server gets it's unique random id.
-                config.addDefault("serverUuid", UUID.randomUUID().toString());
-                // Should failed request be logged?
-                config.addDefault("logFailedRequests", false);
-
-                // Inform the server owners about bStats
-                config.options().header(
-                        "bStats collects some data for plugin authors like how many servers are using their plugins.\n" +
-                                "To honor their work, you should not disable it.\n" +
-                                "This has nearly no effect on the server performance!\n" +
-                                "Check out https://bStats.org/ to learn more :)"
-                ).copyDefaults(true);
-                try {
-                    config.save(configFile);
-                } catch (IOException ignored) {
-                }
-            }
-            // Load the data
-            String serverUUID = config.getString("serverUuid");
-            boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
-            // Only start Metrics, if it's enabled in the config
-            if (config.getBoolean("enabled", true)) {
-                Metrics metrics = new Metrics("Purpur", serverUUID, logFailedRequests, Bukkit.getLogger()); // Pufferfish // Purpur - Purpur config files
-
-                metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> {
-                    String minecraftVersion = Bukkit.getVersion();
-                    minecraftVersion = minecraftVersion.substring(minecraftVersion.indexOf("MC: ") + 4, minecraftVersion.length() - 1);
-                    return minecraftVersion;
-                }));
-
-                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
-                metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() ? "bungee" : "offline"))); // Purpur - Purpur config files
-                metrics.addCustomChart(new Metrics.SimplePie("purpur_version", () -> (org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() != null) ? org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() : "unknown")); // Purpur - Purpur config files
-
-                metrics.addCustomChart(new Metrics.DrilldownPie("java_version", () -> {
-                    Map<String, Map<String, Integer>> map = new HashMap<>();
-                    String javaVersion = System.getProperty("java.version");
-                    Map<String, Integer> entry = new HashMap<>();
-                    entry.put(javaVersion, 1);
-
-                    // http://openjdk.java.net/jeps/223
-                    // Java decided to change their versioning scheme and in doing so modified the java.version system
-                    // property to return $major[.$minor][.$secuity][-ea], as opposed to 1.$major.0_$identifier
-                    // we can handle pre-9 by checking if the "major" is equal to "1", otherwise, 9+
-                    String majorVersion = javaVersion.split("\\.")[0];
-                    String release;
-
-                    int indexOf = javaVersion.lastIndexOf('.');
-
-                    if (majorVersion.equals("1")) {
-                        release = "Java " + javaVersion.substring(0, indexOf);
-                    } else {
-                        // of course, it really wouldn't be all that simple if they didn't add a quirk, now would it
-                        // valid strings for the major may potentially include values such as -ea to deannotate a pre release
-                        Matcher versionMatcher = Pattern.compile("\\d+").matcher(majorVersion);
-                        if (versionMatcher.find()) {
-                            majorVersion = versionMatcher.group(0);
-                        }
-                        release = "Java " + majorVersion;
-                    }
-                    map.put(release, entry);
-
-                    return map;
-                }));
-
-                metrics.addCustomChart(new Metrics.DrilldownPie("legacy_plugins", () -> {
-                    Map<String, Map<String, Integer>> map = new HashMap<>();
-
-                    // count legacy plugins
-                    int legacy = 0;
-                    for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
-                        if (CraftMagicNumbers.isLegacy(plugin.getDescription())) {
-                            legacy++;
-                        }
-                    }
-
-                    // insert real value as lower dimension
-                    Map<String, Integer> entry = new HashMap<>();
-                    entry.put(String.valueOf(legacy), 1);
-
-                    // create buckets as higher dimension
-                    if (legacy == 0) {
-                        map.put("0 \uD83D\uDE0E", entry); // :sunglasses:
-                    } else if (legacy <= 5) {
-                        map.put("1-5", entry);
-                    } else if (legacy <= 10) {
-                        map.put("6-10", entry);
-                    } else if (legacy <= 25) {
-                        map.put("11-25", entry);
-                    } else if (legacy <= 50) {
-                        map.put("26-50", entry);
-                    } else {
-                        map.put("50+ \uD83D\uDE2D", entry); // :cry:
-                    }
-
-                    return map;
-                }));
-            }
-
+            if (config.isSet("enabled")) {
+                // Return null if it's disabled in the config
+                if (!config.getBoolean("enabled", true)) {
+                    return null;
+                }
+
+                // Load the data
+                final String serverUUID = config.getString("serverUuid");
+                final boolean logFailedRequests = config.getBoolean("logFailedRequests", false);
+
+                return new Metrics(build.brandName(), serverUUID, logFailedRequests, Bukkit.getLogger());
+            }
+
+            // Add default values
+            config.addDefault("enabled", true);
+
+            // Every server gets it's unique random id.
+            final String serverUUID = UUID.randomUUID().toString();
+            config.addDefault("serverUuid", serverUUID);
+
+            // Should a failed request be logged?
+            final boolean logFailedRequests = false;
+            config.addDefault("logFailedRequests", logFailedRequests);
+
+            // Inform the server owners about bStats
+            config.options().setHeader(List.of(
+                "bStats collects some data for plugin authors like how many servers are using their plugins.",
+                "To honor their work, you should not disable it.",
+                "This has nearly no effect on the server performance!",
+                "Check out https://bStats.org/ to learn more :)"
+            )).copyDefaults(true);
+
+            try { config.save(configFile); } catch (IOException ignored) {}
+            return new Metrics(build.brandName(), serverUUID, logFailedRequests, Bukkit.getLogger());
+        }
+
+        private static DrilldownPie cachedDrilldownPie(final String chartId, final Callable<Map<String, Map<String, Integer>>> callable) {
+            try {
+                final Map<String, Map<String, Integer>> data = callable.call();
+                return new Metrics.DrilldownPie(chartId, () -> data);
+            } catch (final Throwable t) {
+                if (logFailedRequests) {
+                    logger.log(Level.WARNING, "Failed to get data for custom chart with id " + chartId, t);
+                }
+                return new Metrics.DrilldownPie(chartId, () -> null);
+            }
+        }
+
+        public static void startMetrics() {
+            final io.papermc.paper.ServerBuildInfo build = io.papermc.paper.ServerBuildInfo.buildInfo();
+
+            // Load metrics from config
+            final Metrics metrics = loadMetrics(build);
+            if (metrics == null) {
+                return;
+            }
+
+            final String minecraftVersion = build.minecraftVersionId();
+            metrics.addCustomChart(new Metrics.SimplePie("minecraft_version", () -> minecraftVersion));
+
+            final String implementationVersion = (org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() != null) ? org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion() : "unknown";
+            metrics.addCustomChart(new Metrics.SimplePie("plazma_version", () -> implementationVersion));
+
+            final String authenticationMode = Bukkit.getOnlineMode() ? "online" : (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() ? "bungee" : "offline");
+            metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> authenticationMode));
+
+            metrics.addCustomChart(new Metrics.SingleLineChart("total_players", () -> Bukkit.getOfflinePlayers().length));
+            metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
+
+            metrics.addCustomChart(cachedDrilldownPie("java_version", () -> {
+                String javaVersion = System.getProperty("java.version");
+
+                // http://openjdk.java.net/jeps/223
+                // Java decided to change their versioning scheme and in doing so modified the java.version system
+                // property to return $major[.$minor][.$secuity][-ea], as opposed to 1.$major.0_$identifier
+                // we can handle pre-9 by checking if the "major" is equal to "1", otherwise, 9+
+                String majorVersion = javaVersion.split("\\.")[0];
+                String release;
+
+                if (majorVersion.equals("1")) {
+                    release = "Java " + javaVersion.substring(0, javaVersion.lastIndexOf('.'));
+                } else {
+                    // of course, it really wouldn't be all that simple if they didn't add a quirk, now would it
+                    // valid strings for the major may potentially include values such as -ea to deannotate a pre release
+                    Matcher versionMatcher = Pattern.compile("\\d+").matcher(majorVersion);
+                    if (versionMatcher.find()) {
+                        majorVersion = versionMatcher.group(0);
+                    }
+                    release = "Java " + majorVersion;
+                }
+
+                return Map.of(release, Map.of(javaVersion, 1));
+            }));
+
+            metrics.addCustomChart(new Metrics.DrilldownPie("datapacks", () -> {
+                // count datapacks; since datapacks can be reloaded, we must always count the number again.
+                final int count = Bukkit.getDatapackManager().getEnabledPacks().size();
+
+                // create buckets as higher dimension
+                final String key;
+                if (count == 0) key = "0";
+                else if (count <= 5) key = "1-5";
+                else if (count <= 10) key = "6-10";
+                else if (count <= 25) key = "11-25";
+                else if (count <= 50) key = "26-50";
+                else if (count <= 100) key = "51-100";
+                else key = "101+ \uD83D\uDE2E"; // :open_mouth:
+
+                return Map.of(key, Map.of(String.valueOf(count), 1));
+            }));
+
+            final java.util.stream.Stream<Plugin> plugins = Arrays.stream(Bukkit.getPluginManager().getPlugins());
+
+            // Total plugins count
+            metrics.addCustomChart(cachedDrilldownPie("plugins", () -> {
+                // count plugins
+                final long count = Bukkit.getPluginManager().getPlugins().length;
+
+                // create buckets as higher dimension
+                final String key;
+                if (count == 0) key = "0";
+                else if (count <= 5) key = "1-5";
+                else if (count <= 10) key = "6-10";
+                else if (count <= 25) key = "11-25";
+                else if (count <= 50) key = "26-50";
+                else if (count <= 100) key = "51-100";
+                else key = "101+ \uD83D\uDE2E"; // :open_mouth:
+
+                return Map.of(key, Map.of(String.valueOf(count), 1));
+            }));
+
+            // Disabled plugins
+            metrics.addCustomChart(cachedDrilldownPie("disabled_plugins", () -> {
+                // count disabled plugins
+                final long count = plugins.filter(plugin -> !plugin.isEnabled()).count();
+
+                // create buckets as higher dimension
+                final String key;
+                if (count == 0) key = "0 \uD83D\uDE0E"; // :sunglasses:
+                else if (count <= 5) key = "1-5";
+                else if (count <= 10) key = "6-10";
+                else if (count <= 25) key = "11-25";
+                else if (count <= 50) key = "26-50";
+                else if (count <= 100) key = "51-100";
+                else key = "101+ \uD83D\uDC80"; // :skull:
+
+                return Map.of(key, Map.of(String.valueOf(count), 1));
+            }));
+
+            // Legacy plugins
+            metrics.addCustomChart(cachedDrilldownPie("legacy_plugins", () -> {
+                // count legacy plugins
+                final long count = plugins.filter(plugin -> plugin.getPluginMeta().getAPIVersion() == null).count();
+
+                // create buckets as higher dimension
+                final String key;
+                if (count == 0) key = "0 \uD83D\uDE0E"; // :sunglasses:
+                else if (count <= 5) key = "1-5";
+                else if (count <= 10) key = "6-10";
+                else if (count <= 25) key = "11-25";
+                else if (count <= 50) key = "26-50";
+                else if (count <= 100) key = "51-100";
+                else key = "101+ \uD83D\uDE2D"; // :cry:
+
+                return Map.of(key, Map.of(String.valueOf(count), 1));
+            }));
         }
     }
+    // Plazma end - PaperMetrics
 }
