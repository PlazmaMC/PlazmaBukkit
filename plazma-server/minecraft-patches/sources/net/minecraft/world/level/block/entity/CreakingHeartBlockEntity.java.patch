--- a/net/minecraft/world/level/block/entity/CreakingHeartBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CreakingHeartBlockEntity.java
@@ -98,7 +_,7 @@
                 creakingHeart.ticker = creakingHeart.level == null ? 20 : creakingHeart.level.random.nextInt(5) + 20;
                 if (creakingHeart.creakingInfo == null) {
                     if (!CreakingHeartBlock.hasRequiredLogs(state, level, pos)) {
-                        level.setBlock(pos, state.setValue(CreakingHeartBlock.ACTIVE, Boolean.valueOf(false)), 3);
+                        level.setBlock(pos, state.setValue(CreakingHeartBlock.ACTIVE, false), 3);
                     } else if (state.getValue(CreakingHeartBlock.ACTIVE)) {
                         if (CreakingHeartBlock.isNaturalNight(level)) {
                             if (level.getDifficulty() != Difficulty.PEACEFUL) {
@@ -126,7 +_,7 @@
                         }
 
                         if (!CreakingHeartBlock.hasRequiredLogs(state, level, pos) && creakingHeart.creakingInfo == null) {
-                            level.setBlock(pos, state.setValue(CreakingHeartBlock.ACTIVE, Boolean.valueOf(false)), 3);
+                            level.setBlock(pos, state.setValue(CreakingHeartBlock.ACTIVE, false), 3);
                         }
                     }
                 }
@@ -253,11 +_,11 @@
                     if (blockState.isAir()) {
                         blockState = Blocks.RESIN_CLUMP.defaultBlockState();
                     } else if (blockState.is(Blocks.WATER) && blockState.getFluidState().isSource()) {
-                        blockState = Blocks.RESIN_CLUMP.defaultBlockState().setValue(MultifaceBlock.WATERLOGGED, Boolean.valueOf(true));
+                        blockState = Blocks.RESIN_CLUMP.defaultBlockState().setValue(MultifaceBlock.WATERLOGGED, true);
                     }
 
                     if (blockState.is(Blocks.RESIN_CLUMP) && !MultifaceBlock.hasFace(blockState, opposite)) {
-                        this.level.setBlock(blockPos, blockState.setValue(MultifaceBlock.getFaceProperty(opposite), Boolean.valueOf(true)), 3);
+                        this.level.setBlock(blockPos, blockState.setValue(MultifaceBlock.getFaceProperty(opposite), true), 3);
                         mutable.setValue(blockPos);
                         return BlockPos.TraversalNodeStatus.STOP;
                     }
