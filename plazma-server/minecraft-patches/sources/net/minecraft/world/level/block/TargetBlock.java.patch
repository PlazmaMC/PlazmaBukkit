--- a/net/minecraft/world/level/block/TargetBlock.java
+++ b/net/minecraft/world/level/block/TargetBlock.java
@@ -36,7 +_,7 @@
 
     public TargetBlock(BlockBehaviour.Properties properties) {
         super(properties);
-        this.registerDefaultState(this.stateDefinition.any().setValue(OUTPUT_POWER, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(OUTPUT_POWER, 0));
     }
 
     @Override
@@ -101,14 +_,14 @@
     }
 
     private static void setOutputPower(LevelAccessor level, BlockState state, int power, BlockPos pos, int waitTime) {
-        level.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(power)), 3);
+        level.setBlock(pos, state.setValue(OUTPUT_POWER, power), 3);
         level.scheduleTick(pos, state.getBlock(), waitTime);
     }
 
     @Override
     protected void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
         if (state.getValue(OUTPUT_POWER) != 0) {
-            level.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 3);
+            level.setBlock(pos, state.setValue(OUTPUT_POWER, 0), 3);
         }
     }
 
@@ -131,7 +_,7 @@
     protected void onPlace(BlockState state, Level level, BlockPos pos, BlockState oldState, boolean isMoving) {
         if (!level.isClientSide() && !state.is(oldState.getBlock())) {
             if (state.getValue(OUTPUT_POWER) > 0 && !level.getBlockTicks().hasScheduledTick(pos, this)) {
-                level.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 18);
+                level.setBlock(pos, state.setValue(OUTPUT_POWER, 0), 18);
             }
         }
     }
