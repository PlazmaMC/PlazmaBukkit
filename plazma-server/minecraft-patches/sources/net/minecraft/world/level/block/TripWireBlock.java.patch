--- a/net/minecraft/world/level/block/TripWireBlock.java
+++ b/net/minecraft/world/level/block/TripWireBlock.java
@@ -54,13 +_,13 @@
         this.registerDefaultState(
             this.stateDefinition
                 .any()
-                .setValue(POWERED, Boolean.valueOf(false))
-                .setValue(ATTACHED, Boolean.valueOf(false))
-                .setValue(DISARMED, Boolean.valueOf(false))
-                .setValue(NORTH, Boolean.valueOf(false))
-                .setValue(EAST, Boolean.valueOf(false))
-                .setValue(SOUTH, Boolean.valueOf(false))
-                .setValue(WEST, Boolean.valueOf(false))
+                .setValue(POWERED, false)
+                .setValue(ATTACHED, false)
+                .setValue(DISARMED, false)
+                .setValue(NORTH, false)
+                .setValue(EAST, false)
+                .setValue(SOUTH, false)
+                .setValue(WEST, false)
         );
         this.hook = hook;
     }
@@ -76,10 +_,10 @@
         BlockGetter level = context.getLevel();
         BlockPos clickedPos = context.getClickedPos();
         return this.defaultBlockState()
-            .setValue(NORTH, Boolean.valueOf(this.shouldConnectTo(level.getBlockState(clickedPos.north()), Direction.NORTH)))
-            .setValue(EAST, Boolean.valueOf(this.shouldConnectTo(level.getBlockState(clickedPos.east()), Direction.EAST)))
-            .setValue(SOUTH, Boolean.valueOf(this.shouldConnectTo(level.getBlockState(clickedPos.south()), Direction.SOUTH)))
-            .setValue(WEST, Boolean.valueOf(this.shouldConnectTo(level.getBlockState(clickedPos.west()), Direction.WEST)));
+            .setValue(NORTH, this.shouldConnectTo(level.getBlockState(clickedPos.north()), Direction.NORTH))
+            .setValue(EAST, this.shouldConnectTo(level.getBlockState(clickedPos.east()), Direction.EAST))
+            .setValue(SOUTH, this.shouldConnectTo(level.getBlockState(clickedPos.south()), Direction.SOUTH))
+            .setValue(WEST, this.shouldConnectTo(level.getBlockState(clickedPos.west()), Direction.WEST));
     }
 
     @Override
@@ -95,7 +_,7 @@
     ) {
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent tripwire from updating
         return direction.getAxis().isHorizontal()
-            ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.shouldConnectTo(neighborState, direction)))
+            ? state.setValue(PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(neighborState, direction))
             : super.updateShape(state, level, scheduledTickAccess, pos, direction, neighborPos, neighborState, random);
     }
 
@@ -111,7 +_,7 @@
     protected void onRemove(BlockState state, Level level, BlockPos pos, BlockState newState, boolean isMoving) {
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return; // Paper - prevent adjacent tripwires from updating
         if (!isMoving && !state.is(newState.getBlock())) {
-            this.updateSource(level, pos, state.setValue(POWERED, Boolean.valueOf(true)));
+            this.updateSource(level, pos, state.setValue(POWERED, true));
         }
     }
 
@@ -119,7 +_,7 @@
     public BlockState playerWillDestroy(Level level, BlockPos pos, BlockState state, Player player) {
         if (io.papermc.paper.configuration.GlobalConfiguration.get().blockUpdates.disableTripwireUpdates) return state; // Paper - prevent disarming tripwires
         if (!level.isClientSide && !player.getMainHandItem().isEmpty() && player.getMainHandItem().is(Items.SHEARS)) {
-            level.setBlock(pos, state.setValue(DISARMED, Boolean.valueOf(true)), 4);
+            level.setBlock(pos, state.setValue(DISARMED, true), 4);
             level.gameEvent(player, GameEvent.SHEAR, pos);
         }
 
@@ -224,7 +_,7 @@
         // CraftBukkit end
 
         if (flag != poweredValue) {
-            blockState = blockState.setValue(POWERED, Boolean.valueOf(flag));
+            blockState = blockState.setValue(POWERED, flag);
             level.setBlock(pos, blockState, 3);
             this.updateSource(level, pos, blockState);
         }
