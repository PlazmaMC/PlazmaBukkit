--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
@@ -77,35 +_,35 @@
     private static final AtomicLong CHUNK_LOAD_IDS = new AtomicLong();
 
     public static Long getNextChunkLoadId() {
-        return Long.valueOf(CHUNK_LOAD_IDS.getAndIncrement());
+        return CHUNK_LOAD_IDS.getAndIncrement();
     }
 
     public static final TicketType<Long> NON_FULL_CHUNK_LOAD = TicketType.create("chunk_system:non_full_load", Long::compareTo);
     private static final AtomicLong NON_FULL_CHUNK_LOAD_IDS = new AtomicLong();
 
     public static Long getNextNonFullLoadId() {
-        return Long.valueOf(NON_FULL_CHUNK_LOAD_IDS.getAndIncrement());
+        return NON_FULL_CHUNK_LOAD_IDS.getAndIncrement();
     }
 
     public static final TicketType<Long> ENTITY_LOAD = TicketType.create("chunk_system:entity_load", Long::compareTo);
     private static final AtomicLong ENTITY_LOAD_IDS = new AtomicLong();
 
     public static Long getNextEntityLoadId() {
-        return Long.valueOf(ENTITY_LOAD_IDS.getAndIncrement());
+        return ENTITY_LOAD_IDS.getAndIncrement();
     }
 
     public static final TicketType<Long> POI_LOAD = TicketType.create("chunk_system:poi_load", Long::compareTo);
     private static final AtomicLong POI_LOAD_IDS = new AtomicLong();
 
     public static Long getNextPoiLoadId() {
-        return Long.valueOf(POI_LOAD_IDS.getAndIncrement());
+        return POI_LOAD_IDS.getAndIncrement();
     }
 
     public static final TicketType<Long> CHUNK_RELIGHT = TicketType.create("starlight:chunk_relight", Long::compareTo);
     private static final AtomicLong CHUNK_RELIGHT_IDS = new AtomicLong();
 
     public static Long getNextChunkRelightId() {
-        return Long.valueOf(CHUNK_RELIGHT_IDS.getAndIncrement());
+        return CHUNK_RELIGHT_IDS.getAndIncrement();
     }
 
 
@@ -913,8 +_,8 @@
         public JsonObject toJson() {
             final JsonObject ret = new JsonObject();
 
-            ret.addProperty("chunk-x", Integer.valueOf(this.chunkX));
-            ret.addProperty("chunk-z", Integer.valueOf(this.chunkZ));
+            ret.addProperty("chunk-x", this.chunkX);
+            ret.addProperty("chunk-z", this.chunkZ);
             ret.addProperty("world-name", WorldUtil.getWorldName(this.world));
 
             return ret;
@@ -973,9 +_,9 @@
     public JsonObject getDebugJson() {
         final JsonObject ret = new JsonObject();
 
-        ret.addProperty("lock_shift", Integer.valueOf(this.getChunkSystemLockShift()));
-        ret.addProperty("ticket_shift", Integer.valueOf(ThreadedTicketLevelPropagator.SECTION_SHIFT));
-        ret.addProperty("region_shift", Integer.valueOf(((ChunkSystemServerLevel)this.world).moonrise$getRegionChunkShift()));
+        ret.addProperty("lock_shift", this.getChunkSystemLockShift());
+        ret.addProperty("ticket_shift", ThreadedTicketLevelPropagator.SECTION_SHIFT);
+        ret.addProperty("region_shift", ((ChunkSystemServerLevel) this.world).moonrise$getRegionChunkShift());
 
         ret.addProperty("name", WorldUtil.getWorldName(this.world));
         ret.addProperty("view-distance", ((ChunkSystemServerLevel)this.world).moonrise$getPlayerChunkLoader().getAPIViewDistance());
