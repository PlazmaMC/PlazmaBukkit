--- a/ca/spottedleaf/dataconverter/types/ListType.java
+++ b/ca/spottedleaf/dataconverter/types/ListType.java
@@ -25,17 +_,17 @@
             case NONE:
                 throw new IllegalStateException("List is empty and has no type");
             case BYTE:
-                return Byte.valueOf(this.getByte(index));
+                return this.getByte(index);
             case SHORT:
-                return Short.valueOf(this.getShort(index));
+                return this.getShort(index);
             case INT:
-                return Integer.valueOf(this.getInt(index));
+                return this.getInt(index);
             case LONG:
-                return Long.valueOf(this.getLong(index));
+                return this.getLong(index);
             case FLOAT:
-                return Float.valueOf(this.getFloat(index));
+                return this.getFloat(index);
             case DOUBLE:
-                return Double.valueOf(this.getDouble(index));
+                return this.getDouble(index);
             case NUMBER:
                 return this.getNumber(index);
             case BYTE_ARRAY:
@@ -60,22 +_,22 @@
     public default void setGeneric(final int index, final Object to) {
         if (to instanceof Number) {
             if (to instanceof Byte) {
-                this.setByte(index, ((Byte)to).byteValue());
+                this.setByte(index, (Byte) to);
                 return;
             } else if (to instanceof Short) {
-                this.setShort(index, ((Short)to).shortValue());
+                this.setShort(index, (Short) to);
                 return;
             } else if (to instanceof Integer) {
-                this.setInt(index, ((Integer)to).intValue());
+                this.setInt(index, (Integer) to);
                 return;
             } else if (to instanceof Long) {
-                this.setLong(index, ((Long)to).longValue());
+                this.setLong(index, (Long) to);
                 return;
             } else if (to instanceof Float) {
-                this.setFloat(index, ((Float)to).floatValue());
+                this.setFloat(index, (Float) to);
                 return;
             } else if (to instanceof Double) {
-                this.setDouble(index, ((Double)to).doubleValue());
+                this.setDouble(index, (Double) to);
                 return;
             } // else fall through to throw
         } else if (to instanceof MapType) {
@@ -171,22 +_,22 @@
     public default void addGeneric(final Object to) {
         if (to instanceof Number) {
             if (to instanceof Byte) {
-                this.addByte(((Byte)to).byteValue());
+                this.addByte((Byte) to);
                 return;
             } else if (to instanceof Short) {
-                this.addShort(((Short)to).shortValue());
+                this.addShort((Short) to);
                 return;
             } else if (to instanceof Integer) {
-                this.addInt(((Integer)to).intValue());
+                this.addInt((Integer) to);
                 return;
             } else if (to instanceof Long) {
-                this.addLong(((Long)to).longValue());
+                this.addLong((Long) to);
                 return;
             } else if (to instanceof Float) {
-                this.addFloat(((Float)to).floatValue());
+                this.addFloat((Float) to);
                 return;
             } else if (to instanceof Double) {
-                this.addDouble(((Double)to).doubleValue());
+                this.addDouble((Double) to);
                 return;
             } // else fall through to throw
         } else if (to instanceof MapType) {
