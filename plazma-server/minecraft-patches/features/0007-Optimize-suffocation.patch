From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Wed, 17 Sep 2025 11:05:08 +0900
Subject: [PATCH] Optimize suffocation

Project: Pufferfish (https://github.com/pufferfish-gg/Pufferfish)
Author: Kevin Raneri <kevin.raneri@gmail.com>
License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

Description:
* This patch is based on Pufferfish's "Optimize suffocation" patch.

The isInWall check to determine suffocation is quite expensive, and
often is completely unnecessary to check. We do two things here to
improve this:

1. We only check for suffocation once per 20 ticks. The maximum
no-damage ticks value means that this change should be extremely
difficult, if not impossible, for players to notice.

2. We additionally execute a check to see if the player can even take
damage in the first place. This check doesn't improve performance much
but is so much cheaper than the suffocation check that it's worth
keeping it.

diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index a3b985cc454b2c62e7642f7eb05de590ecde9272..0f7566a88afa3e1a48cb0e17209ebd9336a5ce51 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -442,7 +442,7 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
 
         if (this.isAlive() && this.level() instanceof ServerLevel serverLevel1) {
             boolean flag = this instanceof Player;
-            if (this.isInWall()) {
+            if (shouldCheckForSuffocation() && this.isInWall()) { // Plazma - Optimize suffocation
                 this.hurtServer(serverLevel1, this.damageSources().inWall(), 1.0F);
             } else if (flag && !serverLevel1.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
                 double d = serverLevel1.getWorldBorder().getDistanceToBorder(this) + serverLevel1.getWorldBorder().getDamageSafeZone();
@@ -529,6 +529,16 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
         profilerFiller.pop();
     }
 
+    // Plazma start - Optimize suffocation
+    public boolean couldPossiblyBeHurt(float amount) {
+        return !((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F) || !(amount <= this.lastHurt);
+    }
+
+    public boolean shouldCheckForSuffocation() {
+        return !level().plazmaConfig().entities.optimizeSuffocationCheck || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F));
+    }
+    // Plazma end - Optimize suffocation
+
     @Override
     protected float getBlockSpeedFactor() {
         return Mth.lerp((float)this.getAttributeValue(Attributes.MOVEMENT_EFFICIENCY), super.getBlockSpeedFactor(), 1.0F);
