From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Mon, 15 Sep 2025 00:47:26 +0900
Subject: [PATCH] Plazma Configurations


diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 64e879a9e5e9d2c9d744afaccc66cdb1e0f4fe58..f96b5462b5d3b9757acaadce81ff79c88df125bf 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -301,6 +301,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public volatile boolean abnormalExit; // Paper - Improved watchdog support
     public volatile Thread shutdownThread; // Paper - Improved watchdog support
     public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations; // Paper - add paper configuration files
+    public final org.plazmamc.plazma.configuration.PlazmaConfigurations plazmaConfigurations; // Plazma - add plazma configuration files
     public boolean isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
     private final Set<String> pluginsBlockingSleep = new java.util.HashSet<>(); // Paper - API to allow/disallow tick sleeping
     public static final long SERVER_INIT = System.nanoTime(); // Paper - Lag compensation
@@ -474,6 +475,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
         // CraftBukkit end
         this.paperConfigurations = services.paperConfigurations(); // Paper - add paper configuration files
+        this.plazmaConfigurations = services.plazmaConfigurations(); // Plazma - add plazma configuration files
     }
 
     private void readScoreboard(DimensionDataStorage dataStorage) {
diff --git a/net/minecraft/server/Services.java b/net/minecraft/server/Services.java
index 119540c241390e72a53e162425c0ec5610327ed2..6c1269fb5e3086b445f063f4fcb32e8e8cdbe9a1 100644
--- a/net/minecraft/server/Services.java
+++ b/net/minecraft/server/Services.java
@@ -11,13 +11,13 @@ import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.util.SignatureValidator;
 
 public record Services(
-    MinecraftSessionService sessionService, ServicesKeySet servicesKeySet, GameProfileRepository profileRepository, GameProfileCache profileCache, @javax.annotation.Nullable io.papermc.paper.configuration.PaperConfigurations paperConfigurations // Paper - add paper configuration files
+    MinecraftSessionService sessionService, ServicesKeySet servicesKeySet, GameProfileRepository profileRepository, GameProfileCache profileCache, @javax.annotation.Nullable io.papermc.paper.configuration.PaperConfigurations paperConfigurations, @javax.annotation.Nullable org.plazmamc.plazma.configuration.PlazmaConfigurations plazmaConfigurations // Paper - add paper configuration files // Plazma - add plazma configuration files
 ) {
     public static final String USERID_CACHE_FILE = "usercache.json";
 
     // Paper start - add paper configuration files
     public Services(MinecraftSessionService sessionService, ServicesKeySet servicesKeySet, GameProfileRepository profileRepository, GameProfileCache profileCache) {
-        this(sessionService, servicesKeySet, profileRepository, profileCache, null);
+        this(sessionService, servicesKeySet, profileRepository, profileCache, null, null); // Plazma - Configurable Plazma
     }
 
     @Override
@@ -34,7 +34,8 @@ public record Services(
         //final java.nio.file.Path legacyConfigPath = ((File) optionSet.valueOf("paper-settings")).toPath(); // Plazma - Rewrite paper configuration
         final java.nio.file.Path configDirPath = ((File) optionSet.valueOf("paper-settings-directory")).toPath();
         io.papermc.paper.configuration.PaperConfigurations paperConfigurations = io.papermc.paper.configuration.PaperConfigurations.setup(configDirPath); // Plazma - Rewrite paper configuration
-        return new Services(minecraftSessionService, authenticationService.getServicesKeySet(), gameProfileRepository, gameProfileCache, paperConfigurations);
+        org.plazmamc.plazma.configuration.PlazmaConfigurations plazmaConfigurations = org.plazmamc.plazma.configuration.PlazmaConfigurations.setup(configDirPath); // Plazma - Configurable Plazma
+        return new Services(minecraftSessionService, authenticationService.getServicesKeySet(), gameProfileRepository, gameProfileCache, paperConfigurations, plazmaConfigurations);
         // Paper end - load paper config files from cli options
     }
 
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index 310897894c6be883ae37c794a510321222cc4d3e..8068512cb2baa8b5ef11b21eca008ecaa519ce9b 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -172,6 +172,10 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.paperConfigurations.initializeGlobalConfiguration(this.registryAccess());
         this.paperConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
         // Paper end - initialize global and world-defaults configuration
+        // Plazma start - initialize global and world-defaults configuration
+        this.plazmaConfigurations.initializeGlobalConfiguration(this.registryAccess());
+        this.plazmaConfigurations.initializeWorldDefaultsConfiguration(this.registryAccess());
+        // Plazma end - initialize global and world-defaults configuration
         this.server.spark.enableEarlyIfRequested(); // Paper - spark
         // Paper start - fix converting txt to json file; convert old users earlier after PlayerList creation but before file load/save
         if (this.convertOldUsers()) {
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 3c7159d0981c948e71a5612ba4083accb5849ed4..618650efac78dafe0eb7dfcbf75dddb6bc42fca1 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -586,7 +586,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         org.bukkit.generator.BiomeProvider biomeProvider // CraftBukkit
     ) {
         // CraftBukkit start
-        super(serverLevelData, dimension, server.registryAccess(), levelStem.type(), false, isDebug, biomeZoomSeed, server.getMaxChainedNeighborUpdates(), gen, biomeProvider, env, spigotConfig -> server.paperConfigurations.createWorldConfig(io.papermc.paper.configuration.PaperConfigurations.createWorldContextMap(levelStorageAccess.levelDirectory.path(), serverLevelData.getLevelName(), dimension.location(), spigotConfig, server.registryAccess(), serverLevelData.getGameRules())), dispatcher); // Paper - create paper world configs; Async-Anti-Xray: Pass executor
+        super(serverLevelData, dimension, server.registryAccess(), levelStem.type(), false, isDebug, biomeZoomSeed, server.getMaxChainedNeighborUpdates(), gen, biomeProvider, env, spigotConfig -> server.paperConfigurations.createWorldConfig(io.papermc.paper.configuration.PaperConfigurations.createWorldContextMap(levelStorageAccess.levelDirectory.path(), serverLevelData.getLevelName(), dimension.location(), spigotConfig, server.registryAccess(), serverLevelData.getGameRules())), spigotConfig -> server.plazmaConfigurations.createWorldConfig(org.plazmamc.plazma.configuration.PlazmaConfigurations.createWorldContextMap(levelStorageAccess.levelDirectory.path(), serverLevelData.getLevelName(), dimension.location(), server.registryAccess())), dispatcher); // Paper - create paper world configs; Async-Anti-Xray: Pass executor // Plazma - create plazma world configs
         this.pvpMode = server.isPvpAllowed();
         this.levelStorageAccess = levelStorageAccess;
         this.uuid = org.bukkit.craftbukkit.util.WorldUUID.getOrCreate(levelStorageAccess.levelDirectory.path().toFile());
diff --git a/net/minecraft/world/level/Level.java b/net/minecraft/world/level/Level.java
index a0f3795f3aee1541ddab81da3cd8391f0a70e03d..84e300330709ac61d43e378e07780ab36518bb58 100644
--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -159,6 +159,12 @@ public abstract class Level implements LevelAccessor, UUIDLookup<Entity>, AutoCl
         return this.paperConfig;
     }
     // Paper end - add paper world config
+    // Plazma start - add paper world config
+    private final org.plazmamc.plazma.configuration.WorldConfiguration plazmaConfig;
+    public org.plazmamc.plazma.configuration.WorldConfiguration plazmaConfig() {
+        return this.plazmaConfig;
+    }
+    // Plazma end - add paper world config
 
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur - Purpur config files
     public static @Nullable BlockPos lastPhysicsProblem; // Spigot
@@ -871,6 +877,8 @@ public abstract class Level implements LevelAccessor, UUIDLookup<Entity>, AutoCl
         org.bukkit.World.Environment environment, // Paper
         java.util.function.Function<org.spigotmc.SpigotWorldConfig, // Spigot - create per world config
         io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, // Paper - create paper world config
+        java.util.function.Function<org.spigotmc.SpigotWorldConfig, // Spigot - create per world config
+        org.plazmamc.plazma.configuration.WorldConfiguration> plazmaWorldConfigCreator, // Plazma - create paper world config
         java.util.concurrent.Executor executor // Paper - Anti-Xray
     ) {
         // Paper start - getblock optimisations - cache world height/sections
@@ -884,6 +892,7 @@ public abstract class Level implements LevelAccessor, UUIDLookup<Entity>, AutoCl
         // Paper end - getblock optimisations - cache world height/sections
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) levelData).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper - create paper world config
+        this.plazmaConfig = plazmaWorldConfigCreator.apply(this.spigotConfig); // Plazma - create paper world config
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) levelData).getLevelName(), environment); // Purpur - Purpur config files
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur - Add adjustable breeding cooldown to config
         this.generator = generator;
