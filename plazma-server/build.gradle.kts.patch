--- a/purpur-server/build.gradle.kts
+++ b/purpur-server/build.gradle.kts
@@ -29,7 +_,23 @@
             outputDir = rootDirectory.dir("paper-server")
         }
     }
-    activeFork = purpur
+
+    val plazma = forks.register("plazma") {
+        forks = purpur
+        upstream.patchRepo("paperServer") {
+            upstreamRepo = purpur.patchedRepo("paperServer")
+            patchesDir = rootDirectory.dir("plazma-server/paper-patches")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+        upstream.patchDir("purpurServer") {
+            upstreamPath = "purpur-server"
+            excludes = setOf("src/minecraft", "minecraft-patches", "paper-patches", "build.gradle.kts", "build.gradle.kts.patch")
+            patchesDir = rootDirectory.dir("plazma-server/purpur-patches")
+            outputDir = rootDirectory.dir("purpur-server")
+        }
+    }
+
+    activeFork = plazma
 
     spigot {
         buildDataRef = "3edaf46ec1eed4115ce1b18d2846cded42577e42"
@@ -115,10 +_,14 @@
     main {
         java { srcDir("../paper-server/src/main/java") }
         resources { srcDir("../paper-server/src/main/resources") }
+        java { srcDir("../purpur-server/src/main/java") }
+        resources { srcDir("../purpur-server/src/main/resources") }
     }
     test {
         java { srcDir("../paper-server/src/test/java") }
         resources { srcDir("../paper-server/src/test/resources") }
+        java { srcDir("../purpur-server/src/test/java") }
+        resources { srcDir("../purpur-server/src/test/resources") }
     }
 }
 
@@ -142,7 +_,7 @@
 }
 
 dependencies {
-    implementation(project(":purpur-api"))
+    implementation(project(":plazma-api"))
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -290,7 +_,7 @@
         languageVersion.set(JavaLanguageVersion.of(21))
         vendor.set(JvmVendorSpec.JETBRAINS)
     })
-    jvmArgs("-XX:+AllowEnhancedClassRedefinition")
+    jvmArgs("-XX:+AllowEnhancedClassRedefinition", "--add-modules=jdk.incubator.vector", "-XX:+UseG1GC", "-XX:+ParallelRefProcEnabled", "-XX:MaxGCPauseMillis=200", "-XX:+UnlockExperimentalVMOptions", "-XX:+DisableExplicitGC", "-XX:+AlwaysPreTouch", "-XX:G1HeapWastePercent=5", "-XX:G1MixedGCCountTarget=4", "-XX:InitiatingHeapOccupancyPercent=15", "-XX:G1MixedGCLiveThresholdPercent=90", "-XX:G1RSetUpdatingPauseTimePercent=5", "-XX:SurvivorRatio=32", "-XX:+PerfDisableSharedMem", "-XX:MaxTenuringThreshold=1", "-Dusing.aikars.flags=https://mcflags.emc.gs", "-Daikars.new.flags=true", "-XX:G1NewSizePercent=40", "-XX:G1MaxNewSizePercent=50", "-XX:G1HeapRegionSize=16M", "-XX:G1ReservePercent=15") // Plazma
 
     if (rootProject.childProjects["test-plugin"] != null) {
         val testPluginJar = rootProject.project(":test-plugin").tasks.jar.flatMap { it.archiveFile }
